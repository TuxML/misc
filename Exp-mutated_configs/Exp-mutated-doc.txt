Steps : 

1) Select .config files from old database.

	With a script called "find_configs.ipynb" we are able to retrieve a sample of 200 .config files that fulfill our criteria (see df.query)
	This script uses the tuxml dataframe so you'll need to clone 
		- https://github.com/TuxML/size_analysis
		- https://gitlab.com/FAMILIAR-project/tuxml-size-analysis-datasets/

2) We want to change the value of some specific options 
	/!\ For this step you'll need the kernel sources and place the scripts 'mutate_configs.py' and 'check_sample.py' there.
	Using 'mutate_configs.py' we manage to change the value of the desired option(s) by using a kernel-source integrated script : scripts/config.
	It then checks that only our option(s) have changed using 'make olddefconfig' and compares the two files we have.
	
2b) Choose the .config files that only differ from originals by our chosen options, and select 100 from them.
	Just run check_sample.py

3) After doing this, we now have our ready-to-compile .config files in the 'sample_configs' folder. Copy the folder's content on the grid (e.g /temp_dd/igrida-fs1/psaffrau/input_files/configs/).

4) Compile !
	Using tuxml, we compile our mutated .config which sends the results to database.
	For the moment we have done serialized compilations using one single node, but the objective is to parallelize the task, in order to check several options and do it faster.
	
5) Comparing the size
	Using a script 'get_cid_per_config.py' on the grid, we manage to get the association between the cid in the old database and the cid of the associated mutated .config compilation in the new database.
	This script uses the output files of the jobs on igrida to find which <old-cid-mutated>.config has been sent with which cid.
	(not ready for parallelized jobs yet)

6) Dataframe ! 
	Using 'get_same_configs_from_db.ipynb' we are now able to compute the size difference between before and after the option(s) manipulation, and store the values in a dataframe.



